grammar;

use std::str::FromStr;
use crate::language::plaia::ast::*;

Num: i64 = {
  <s:r"[0-9]+"> => i64::from_str(s).unwrap(),
  "-" <s:r"[0-9]+"> => 0 - i64::from_str(s).unwrap(),
}

Ident : String = {
    r"[a-zA-Z_]+" => (<>).to_string()
}

pub Symb: Symbol = {
  <i:Ident> => Symbol::new(i)
}

pub LiteralKind: LiteralKind = {
  "true"       => LiteralKind::LBool(true),
  "false"      => LiteralKind::LBool(false),
  <n:Num>      => LiteralKind::LInt(n)
}

pub Lit: Lit = {
  <l:@L> <lit:LiteralKind> <r:@R> => Lit { lit:lit, loc: (l,r) }
}

pub ExprOp: BinOp = {
 "+" => BinOp::Add,
 "-" => BinOp::Sub,
}

pub FactorOp: BinOp = {
 "*" => BinOp::Mul,
 "/" => BinOp::Div,
}

pub TermKind: ExprKind = {
  <l:Lit>   => ExprKind::Lit(l),
  <x:Symb>  => ExprKind::Var(x),
  "&" <e:Term> => ExprKind::Ref(Box::new(e)),
  "*" <e:Term> => ExprKind::Deref(Box::new(e)),
  <f:Symb> "(" <args:Comma<Expr>> ")" =>
    ExprKind::FunCall(f, args),
  "(" <e:ExprKind> ")" => e,
}

pub FactorKind: ExprKind = {
  <l:Factor> <op:FactorOp> <t:Term> =>
    ExprKind::Binary(op, Box::new(l), Box::new(t)),
  TermKind,
}

pub Term: Expr = {
 <lo:@L> <t: TermKind> <hi:@R> =>
   Expr {
     expr: t,
     loc: (lo, hi)
   }
}

pub Factor: Expr = {
 <lo:@L> <f: FactorKind> <hi:@R> =>
   Expr {
     expr: f,
     loc: (lo, hi)
   }
}

pub ExprKind: ExprKind = {
  <lhs:Expr> <op:ExprOp> <rhs:Factor> =>
    ExprKind::Binary(op, Box::new(lhs), Box::new(rhs)),

  <f:FactorKind> => f,
}

pub Expr: Expr = {
  <lo:@L> <e: ExprKind> <hi:@R> =>
    Expr {
      expr: e,
      loc: (lo, hi)
    }
}

pub LValKind: LValKind = {
  <s:Symb> => LValKind::VarRef(s)
}

pub LVal: LVal = {
  <lo:@L> <lvalk:LValKind> <hi:@R> =>
  LVal {
    lval: lvalk,
    loc: (lo, hi)
  }
}

pub Type: Type = {
  "(" <t:Type> ")" => t,
  "i64"            => Type::I64,
  "bool"           => Type::Bool,
  <t:Type> "*"     => Type::Ptr(Box::new(t))
}

pub TypeBind: TypeBind = {
  <l:@L> <x:Symb> ":" <t:Type> <r:@R> => TypeBind::new(x, t, (l, r))
}

pub StatementKind: StatementKind = {
  "let" <ty:TypeBind>              ";" => StatementKind::VarDecl(ty, None),
  "let" <ty:TypeBind> "=" <e:Expr> ";" => StatementKind::VarDecl(ty, Some(e)),
  <l:Expr> "=" <e:Expr>            ";" => StatementKind::Assign(l, e),
  "{" <ss:Statement*> "}"              => StatementKind::new_block(ss),
  "if" <e:Expr> "then" <s:Statement>   => if_statement(e, s)
}

pub Statement: Statement = {
   <lo:@L> <stmtk: StatementKind> <hi:@R> =>
   Statement {
     stmt: stmtk,
     loc: (lo, hi)
   }
}

pub FnDecl: FnDecl = {
  <lo:@L> "def" <name:Symb> "(" <params:Comma<TypeBind>> ")" "=" <body:Statement> <hi:@R> =>
  FnDecl { name: name, params: params, body: body, loc: (lo, hi) }
}

pub Module: Module = {
  <l:@L> <globals:TypeBind*> <functions:FnDecl*> <r:@R> =>
    Module { globals: globals, functions: functions, loc: (l,r) }
}

// Helpers:

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
